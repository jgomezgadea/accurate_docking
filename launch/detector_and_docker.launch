<?xml version="1.0"?>
<launch>
<!-- rb1_base_docking -->

	<arg name="id_robot" default="robot"/>
	<arg name="prefix" value="$(arg id_robot)_"/>
	<arg name="distance_between_reflectors" default="0.41" />
	<arg name="filter_config_file" default="$(optenv ROBOT_LASER_MODEL_INTENSITY_FILTER default)_intensity_filter"/>

	<arg name="fixed_frame" default="$(arg prefix)odom"/>
	<arg name="robot_base_frame" default="$(arg prefix)base_footprint"/>

	<!-- laser -->
	<arg name="laser_dock_middle_frame" default="$(arg prefix)point_between_reflectors"/>
	<arg name="laser_filtered_dock_frame" default="$(arg prefix)filtered_point_between_reflectors"/>
	<arg name="laser_filtered_real_dock_frame" default="$(arg prefix)accurate_test_goal"/>
	<arg name="config_laser_reflectors_filter" default="$(find rb1_base_perception)/config/laser/$(arg filter_config_file).yaml"/>
	<arg name="source_topic" default="/robot/front_laser/scan" />
	<arg name="target_topic" default="/robot/front_laser/cloud_reflector" />
	<arg name="goal_distance_from_reflector" default="-0.45" />
	<arg name="y_adjustment_from_reflector" default="0.0" /> 
	<arg name="theta_adjustment_from_reflector" default="0.0" /> 

  <arg name="has_safety_controller" default="false"/>
  <arg name="cmd_vel_topic" default="/robot/move/cmd_vel"/>


	<group ns="$(arg id_robot)">

   <group ns="accurate_docking">

      <node pkg="laser_filters" type="scan_to_cloud_filter_chain" name="scan_to_cloud_filter_reflector">
        <rosparam command="load" file="$(arg config_laser_reflectors_filter)"/>
        <param name="high_fidelity" value="true"/>
        <param name="incident_angle_correction" value="false"/>
        <param name="target_frame"  value="$(arg robot_base_frame)"/>
        <remap from="scan" to="$(arg source_topic)"/>
        <remap from="cloud_filtered" to="$(arg target_topic)"/>
      </node>

      <node pkg="robotnik_locator" type="two_tag_laser_locator_node" name="two_tag_laser_locator_node">
        <param name="robot_base_frame" value="$(arg robot_base_frame)"/>
        <param name="fixed_frame" value="$(arg fixed_frame)" />
        <param name="object_frame" value="$(arg laser_dock_middle_frame)"/>
        <param name="scan_topic_name" value="$(arg target_topic)" />
        <param name="min_num_cluster" type="int" value="10"/>
        <param name="max_num_cluser" type="int" value="500"/>
        <param name="cluster_tolerance" value="0.05"/>
        <param name="tag_distance" value="$(arg distance_between_reflectors)"/>
        <param name="tag_distance_margin" value="0.1"/>
        <param name="distance_detection" value="3.5"/>
        <param name="desired_freq" value="40.0"/>
        <param name="filter_object_by_orientation" value="false"/>
      </node>

      <node name="tf_laser_dock_pose_filter" pkg="robotnik_pose_filter" type="tf_pose_filter_node" respawn="false">
        <param name="filter_position_sensitivity"       type="double" value="0.8" />
        <param name="filter_orientation_sensitivity"    type="double" value="0.2" />
        <param name="source_frame" type="string" value="$(arg fixed_frame)" />
        <param name="target_frame" type="string" value="$(arg laser_dock_middle_frame)" />
        <param name="filtered_source_frame" type="string" value="$(arg fixed_frame)" />
        <param name="filtered_target_frame" type="string" value="$(arg laser_filtered_dock_frame)" />
        <param name="two_d_mode" type="bool" value="false" />
        <rosparam param="apply_transform">[0.0, 0.0, 0.0, 0.0, 0.0, 1.5707]</rosparam>
        <!-- if not set, does not apply a transform. transform is xyz-rpy, 6 parameters. remember that rotation is applied in reverse order (ypr) -->
      </node>

      <node name="tf_publisher_goal" pkg="tf" type="static_transform_publisher" args="$(arg goal_distance_from_reflector) $(arg y_adjustment_from_reflector) 0 0 0 $(arg theta_adjustment_from_reflector) $(arg laser_filtered_dock_frame) $(arg laser_filtered_real_dock_frame) 50" />

      <node name="pp_docker" pkg="robotnik_docker" type="purepursuit_docker_node" respawn="false" output="screen">
        <param name="robot_base_frame" type="string" value="$(arg robot_base_frame)" />
        <param name="fixed_frame" type="string" value="$(arg fixed_frame)" />

        <param name="gain_linear_velocity_x" value="0.2" />
        <param name="gain_angular_velocity_z" value="2.0" />

        <param name="maximum_linear_velocity_x" value="0.2" />
        <param name="maximum_angular_velocity_z" value="0.7" />

        <param name="minimum_relative_linear_velocity_between_robot_and_goal" value="0.01" />
        <param name="minimum_relative_angular_velocity_between_robot_and_goal" value="0.005" />

        <param name="check_robot_is_moving_to_goal" value="true" />
        <param name="robot_moving_to_goal_delay" value="30.0" />

        <param name="free_goal_velocity" value="true" />

        <param name="goal_threshold_x" value="0.01" />
        <param name="goal_threshold_y" value="0.01" />

        <param name="threshold_linear_velocity_x" value="0.01" />
        <param name="threshold_linear_velocity_y" value="0.01" />
        <param name="threshold_angular_velocity_z" value="0.01" />

        <param name="check_initial_limits" value="false" />

        <!-- custom params -->
        <param name="kr" value="0.2"/>
        <param name="look_ahead" value="0.25"/>
        <param name="pre_dock_point_distance" value="-1.0"/>
        
        <remap unless="$(arg has_safety_controller)" from="cmd_vel" to="$(arg cmd_vel_topic)" />
        <remap if="$(arg has_safety_controller)" from="cmd_vel" to="$(arg cmd_vel_topic)_unsafe" />

        <param name="free_flight_mode" value="false" />
        <param name="tf_update_frequency" value="1" />
        <param name="tf_update_min_distance" value="0.1" />

      </node>

       

      <node name="move" pkg="robotnik_move" type="move_node" respawn="false" output="screen">
          <param name="robot_base_frame" type="string" value="$(arg robot_base_frame)" />

          <param name="fixed_frame" type="string" value="$(arg fixed_frame)" />

          <param name="gain_linear_velocity_x" value="0.5" />
          <param name="gain_angular_velocity_z" value="2.0" />

          <param name="maximum_linear_velocity_x" value="0.1" />
          <param name="maximum_angular_velocity_z" value="0.3" />

          <param name="goal_threshold_x" value="0.002" />
          <param name="goal_threshold_y" value="0.002" />
          <param name="goal_threshold_theta" value="0.0025" />

          <param name="threshold_linear_velocity_x" value="0.002" />
          <param name="threshold_linear_velocity_y" value="0.002" />
          <param name="threshold_angular_velocity_z" value="0.05" />

          <param name="initial_maximum_distance_x" value="2.5" />
          <param name="initial_minimum_distance_x" value="0.01" />

          <param name="initial_maximum_arc" value="1" />
          <param name="initial_maximum_yaw" value="1" />
          <remap unless="$(arg has_safety_controller)" from="cmd_vel" to="$(arg cmd_vel_topic)" />
          <remap if="$(arg has_safety_controller)" from="cmd_vel" to="$(arg cmd_vel_topic)_unsafe" />


          <param name="check_robot_is_moving_to_goal" value="false" />
          <param name="robot_moving_to_goal_delay" value="3" />
          <param name="robot_moving_to_goal_averaging_time" value="5" />
      </node>
      <node if="$(arg has_safety_controller)" pkg="robotnik_safety_controller" type="robotnik_safety_controller_node" name="robotnik_safety_controller">
          <!-- robot footprint -->
          <param name="base_frame" value="$(arg robot_base_frame)" />
          <param name="robot_x_size" value="0.5" />
          <param name="robot_y_size" value="0.5" />
          <param name="use_circle_as_area" value="true" />
          <param name="stop_radius_area" value="0.35" />
          <param name="warning_radius_area" value="0.4" />
          <param name="minimum_points_for_detection" value="2" />
          
          <param name="max_warning_speed" value="0.5" />

          <remap from="cmd_vel_in" to="$(arg cmd_vel_topic)_unsafe"/>
          <remap from="cmd_vel_out" to="$(arg cmd_vel_topic)"/>
      </node>
  	</group>
	</group>
</launch>
